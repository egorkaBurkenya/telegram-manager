import telebot
import random
import json
from telebot import types
 
with open('config.json', 'r', encoding='utf-8') as fh: 
    data = json.load(fh)

bot = telebot.TeleBot(data['TOKEN'])

 
@bot.message_handler(commands=['start'])
def welcome(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Ñ–∞–π–ª ?")
    item2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å id —á–∞—Ç–∞")
 
    markup.add(item1, item2)
 
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —Ç–≤–æ–∏ –ª–∏—á–Ω—ã–π –º–µ–Ω–∞–¥–∂–µ—Ä –∫–æ–¥–∞!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['commands'])
def commands(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã")
    item2 = types.KeyboardButton("id —á–∞—Ç–∞")
 
    markup.add(item1, item2)
 
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —Ç–≤–æ–∏ –ª–∏—á–Ω—ã–π –º–µ–Ω–∞–¥–∂–µ—Ä –∫–æ–¥–∞!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
 
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == '–£–∑–Ω–∞—Ç—å id —á–∞—Ç–∞':
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", callback_data='what')
            item2 = types.InlineKeyboardButton("—Å–ø–∞—Å–∏–±–æ!", callback_data='thanks')
            markup.add(item1, item2)
            
            bot.send_message(message.chat.id, message.chat.id, reply_markup=markup)

        elif message.text == 'id —á–∞—Ç–∞':
            bot.send_message(message.chat.id, message.chat.id)
        
        elif message.text == '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Ñ–∞–π–ª ?':
            bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è, –∏–º–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–π —Ñ–∞–π–ª: os, —Ñ–∞–π–ª sender.py \n\nimport os\nimport sender as s\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—ã —á–∏—Ç–∞–π—Ç–µ README.md —Ñ–∞–π–ª –Ω–∞ GitHub\n\n https://github.com/egorkaBurkenya/telegram-manager')

        elif message.text == '–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã':
           
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("all")
            item2 = types.KeyboardButton("errors")
            item3 = types.KeyboardButton("message")
            item4 = types.KeyboardButton("print")
            markup.add(item1, item2, item3, item4)
            bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã!', reply_markup=markup)
        
        elif message.text == 'all':
            with open('config.json', 'r', encoding='utf-8') as fh: 
                data = json.load(fh)
            if data["OPERATING_MODE"] == '0':
                bot.send_message(message.chat.id, '–£–∂–µ –≤–∫–ª—é—á–µ–Ω –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º') 
            else: 
                data["OPERATING_MODE"] = '0' 
                with open('config.json', 'w', encoding='utf-8') as fh:
                    fh.write(json.dumps(data, ensure_ascii=False))
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! —Ç–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!')
        
        elif message.text == 'errors':
            with open('config.json', 'r', encoding='utf-8') as fh: 
                data = json.load(fh)
            if data["OPERATING_MODE"] == '1':
                bot.send_message(message.chat.id, '–£–∂–µ –≤–∫–ª—é—á–µ–Ω –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º') 
            else: 
                data["OPERATING_MODE"] = '1' 
                with open('config.json', 'w', encoding='utf-8') as fh:
                    fh.write(json.dumps(data, ensure_ascii=False))
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –ø–æ—Ç—Ä–µ–≤–æ–∂–∞—Ç –≤–∞—Å')
        elif message.text == 'message':
            with open('config.json', 'r', encoding='utf-8') as fh: 
                data = json.load(fh)
            if data["OPERATING_MODE"] == '2':
                bot.send_message(message.chat.id, '–£–∂–µ –≤–∫–ª—é—á–µ–Ω –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º') 
            else: 
                data["OPERATING_MODE"] = '2' 
                with open('config.json', 'w', encoding='utf-8') as fh:
                    fh.write(json.dumps(data, ensure_ascii=False))
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–≤–æ–∂–∞—Ç –≤–∞—Å')
            
        elif message.text == 'print':
            with open('config.json', 'r', encoding='utf-8') as fh: 
                data = json.load(fh)
            if data["OPERATING_MODE"] == '3':
                bot.send_message(message.chat.id, '–£–∂–µ –≤–∫–ª—é—á–µ–Ω –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º') 
            else: 
                data["OPERATING_MODE"] = '3' 
                with open('config.json', 'w', encoding='utf-8') as fh:
                    fh.write(json.dumps(data, ensure_ascii=False))
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ print –ø–æ—Ç—Ä–µ–≤–æ–∂–∏—Ç –≤–∞—Å')
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'what':
                bot.send_message(call.message.chat.id, 'id –Ω—É–∂–µ–Ω –≤–∞–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—à–∏–±–∫–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª')
            elif call.data == 'thanks':
                bot.send_message(call.message.chat.id, '—Ü–º–æ–∫')
    except Exception as e:
        print(repr(e))
 
bot.polling(none_stop=True)